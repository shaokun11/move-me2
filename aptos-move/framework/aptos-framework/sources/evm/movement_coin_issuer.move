module aptos_framework::movement_coin_issuer {
    use aptos_framework::evm::{get_nonce, get_evm_address, send_move_tx_to_evm};
    use std::string;
    use std::signer::address_of;
    use aptos_framework::evm_util::{get_contract_address, u256_to_data};
    use std::bcs::to_bytes;
    use aptos_framework::movement_coin;
    #[test_only]
    use aptos_framework::account;
    #[test_only]
    use std::string::utf8;
    #[test_only]
    use aptos_framework::evm::query;
    #[test_only]
    use std::vector;
    #[test_only]
    use aptos_std::debug;
    #[test_only]
    use aptos_framework::movement_coin::get_coin_key_by_type;

    const COIN_DEPLOY_BYTECODE: vector<u8> = x"608060405261010160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015610051575f80fd5b50610a4d8061005f5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c806306fdde031461006457806318160ddd14610082578063313ce567146100a057806370a08231146100be57806395d89b41146100ee578063a9059cbb1461010c575b5f80fd5b61006c61013c565b6040516100799190610611565b60405180910390f35b61008a610152565b6040516100979190610649565b60405180910390f35b6100a861015a565b6040516100b5919061067d565b60405180910390f35b6100d860048036038101906100d391906106f4565b610162565b6040516100e59190610649565b60405180910390f35b6100f6610352565b6040516101039190610611565b60405180910390f35b61012660048036038101906101219190610749565b610368565b60405161013391906107a1565b60405180910390f35b606060405180602001604052805f815250905090565b5f8054905090565b5f6006905090565b5f8060018360405160200161017892919061080b565b6040516020818303038152906040526040516024016101979190610884565b6040516020818303038152906040527f2c9e6315000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f816040516024016102289190610884565b6040516020818303038152906040527f4239e36b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516102ee91906108de565b5f60405180830381855afa9150503d805f8114610326576040519150601f19603f3d011682016040523d82523d5f602084013e61032b565b606091505b509150505f818060200190518101906103449190610908565b905080945050505050919050565b606060405180602001604052805f815250905090565b5f806005338585604051602001610382949392919061096c565b6040516020818303038152906040526040516024016103a19190610884565b6040516020818303038152906040527f2c9e6315000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f816040516024016104329190610884565b6040516020818303038152906040527f4239e36b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516104f891906108de565b5f604051808303815f865af19150503d805f8114610531576040519150601f19603f3d011682016040523d82523d5f602084013e610536565b606091505b505090508061057a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610571906109f9565b60405180910390fd5b6001935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156105be5780820151818401526020810190506105a3565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6105e382610587565b6105ed8185610591565b93506105fd8185602086016105a1565b610606816105c9565b840191505092915050565b5f6020820190508181035f83015261062981846105d9565b905092915050565b5f819050919050565b61064381610631565b82525050565b5f60208201905061065c5f83018461063a565b92915050565b5f60ff82169050919050565b61067781610662565b82525050565b5f6020820190506106905f83018461066e565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106c38261069a565b9050919050565b6106d3816106b9565b81146106dd575f80fd5b50565b5f813590506106ee816106ca565b92915050565b5f6020828403121561070957610708610696565b5b5f610716848285016106e0565b91505092915050565b61072881610631565b8114610732575f80fd5b50565b5f813590506107438161071f565b92915050565b5f806040838503121561075f5761075e610696565b5b5f61076c858286016106e0565b925050602061077d85828601610735565b9150509250929050565b5f8115159050919050565b61079b81610787565b82525050565b5f6020820190506107b45f830184610792565b92915050565b5f819050919050565b5f819050919050565b5f6107e66107e16107dc846107ba565b6107c3565b610662565b9050919050565b6107f6816107cc565b82525050565b610805816106b9565b82525050565b5f60408201905061081e5f8301856107ed565b61082b60208301846107fc565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f61085682610832565b610860818561083c565b93506108708185602086016105a1565b610879816105c9565b840191505092915050565b5f6020820190508181035f83015261089c818461084c565b905092915050565b5f81905092915050565b5f6108b882610832565b6108c281856108a4565b93506108d28185602086016105a1565b80840191505092915050565b5f6108e982846108ae565b915081905092915050565b5f815190506109028161071f565b92915050565b5f6020828403121561091d5761091c610696565b5b5f61092a848285016108f4565b91505092915050565b5f819050919050565b5f61095661095161094c84610933565b6107c3565b610662565b9050919050565b6109668161093c565b82525050565b5f60808201905061097f5f83018761095d565b61098c60208301866107fc565b61099960408301856107fc565b6109a6606083018461063a565b95945050505050565b7f63616c6c206661696c65640000000000000000000000000000000000000000005f82015250565b5f6109e3600b83610591565b91506109ee826109af565b602082019050919050565b5f6020820190508181035f830152610a10816109d7565b905091905056fea264697066735822122013252bc4083f708269eb703505dcae141171ad1bdf9bccf6bd276b413ce4653c64736f6c63430008140033";
    const ZERO_ADDR: vector<u8> =      x"0000000000000000000000000000000000000000000000000000000000000000";

    struct A {

    }

    public entry fun create_movement_coin<CoinType>(
        creator: &signer,
        name: string::String,
        symbol: string::String,
        supply: u256,
        decimals: u8
    ) {
        let account_addr = address_of(creator);
        let nonce = get_nonce(get_evm_address(account_addr));
        let evm_address = get_contract_address(to_bytes(&account_addr), nonce);
        send_move_tx_to_evm(creator, ZERO_ADDR, u256_to_data(0), COIN_DEPLOY_BYTECODE, 1);
        movement_coin::create<CoinType>(creator, evm_address, name, symbol, supply, decimals);
    }

    #[test]
    fun test_movement_coin() {
        let sender = to_bytes(&@0x1);
        let evm = account::create_account_for_test(@0x1);

        let account_addr = address_of(&evm);
        let nonce = get_nonce(get_evm_address(@0x1));
        let evm_contract_address = get_contract_address(to_bytes(&account_addr), nonce);

        movement_coin::initialize(&evm);
        create_movement_coin<A>(&evm, utf8(b"A"), utf8(b"A"), 10000000000, 6);


        let params = x"70a08231";
        vector::append(&mut params, sender);
        debug::print(&utf8(b"query balance"));
        debug::print(&query(sender, evm_contract_address, params));

        let to_account = account::create_account_for_test(@0x2);
        movement_coin::register(&to_account, get_coin_key_by_type<A>());

        let transfer_params = x"a9059cbb";
        let to = to_bytes(&address_of(&to_account));
        vector::append(&mut transfer_params, to);
        vector::append(&mut transfer_params, u256_to_data(5000000000));
        debug::print(&utf8(b"transfer"));
        debug::print(&query(sender, evm_contract_address, transfer_params));


        let params = x"70a08231";
        vector::append(&mut params, sender);
        debug::print(&utf8(b"query balance"));
        debug::print(&query(sender, evm_contract_address, params));
    }
}